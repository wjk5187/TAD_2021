pc2_loading <- tibble(token = rownames(pc_loadings), loading = as.vector(pc_loadings[,3])) %>% arrange(-loading)
pc2_loading$loading <- scale(pc2_loading$loading, center = TRUE)
pc2_loading <- rbind(top_n(pc2_loading, N, loading),top_n(pc2_loading, -N, loading))
pc2_loading <- transform(pc2_loading, token = factor(token, levels = unique(token)))
# plot top tokens according to absolute loading values
gg <- ggplot(pc2_loading, aes(token, loading)) +
geom_bar(stat = "identity", fill = ifelse(pc2_loading$loading <= 0, "grey20", "grey70")) +
coord_flip() +
xlab("Tokens") + ylab("Tokens with Top Loadings on PC2") +
scale_colour_grey(start = .3, end = .7) +
theme(panel.background = element_blank(),
axis.text.x = element_text(size=16),
axis.text.y = element_text(size=16),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 15, b = 0, l = 15)),
axis.title.x = element_text(size=18, margin = margin(t = 15, r = 0, b = 15, l = 0)),
legend.text=element_text(size=16),
legend.title=element_blank(),
legend.key=element_blank(),
legend.position = "top",
legend.spacing.x = unit(0.25, 'cm'),
plot.margin=unit(c(1,1,0,0),"cm"))
gg
N <- 10
pc2_loading <- tibble(token = rownames(pc_loadings), loading = as.vector(pc_loadings[,4])) %>% arrange(-loading)
pc2_loading$loading <- scale(pc2_loading$loading, center = TRUE)
pc2_loading <- rbind(top_n(pc2_loading, N, loading),top_n(pc2_loading, -N, loading))
pc2_loading <- transform(pc2_loading, token = factor(token, levels = unique(token)))
# plot top tokens according to absolute loading values
gg <- ggplot(pc2_loading, aes(token, loading)) +
geom_bar(stat = "identity", fill = ifelse(pc2_loading$loading <= 0, "grey20", "grey70")) +
coord_flip() +
xlab("Tokens") + ylab("Tokens with Top Loadings on PC2") +
scale_colour_grey(start = .3, end = .7) +
theme(panel.background = element_blank(),
axis.text.x = element_text(size=16),
axis.text.y = element_text(size=16),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 15, b = 0, l = 15)),
axis.title.x = element_text(size=18, margin = margin(t = 15, r = 0, b = 15, l = 0)),
legend.text=element_text(size=16),
legend.title=element_blank(),
legend.key=element_blank(),
legend.position = "top",
legend.spacing.x = unit(0.25, 'cm'),
plot.margin=unit(c(1,1,0,0),"cm"))
gg
# Question 2: Who are the 5 people Obama's inaugural address is most
#close to in 2013? What about Trump in 2017?
nearest_neighbors(query = "2013-Obama", low_dim_space = inaugural_pca$x, N = 5, norm = "l2")
N <- 10
pc2_loading <- tibble(token = rownames(pc_loadings), loading = as.vector(pc_loadings[,5])) %>% arrange(-loading)
pc2_loading$loading <- scale(pc2_loading$loading, center = TRUE)
pc2_loading <- rbind(top_n(pc2_loading, N, loading),top_n(pc2_loading, -N, loading))
pc2_loading <- transform(pc2_loading, token = factor(token, levels = unique(token)))
# plot top tokens according to absolute loading values
gg <- ggplot(pc2_loading, aes(token, loading)) +
geom_bar(stat = "identity", fill = ifelse(pc2_loading$loading <= 0, "grey20", "grey70")) +
coord_flip() +
xlab("Tokens") + ylab("Tokens with Top Loadings on PC2") +
scale_colour_grey(start = .3, end = .7) +
theme(panel.background = element_blank(),
axis.text.x = element_text(size=16),
axis.text.y = element_text(size=16),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 15, b = 0, l = 15)),
axis.title.x = element_text(size=18, margin = margin(t = 15, r = 0, b = 15, l = 0)),
legend.text=element_text(size=16),
legend.title=element_blank(),
legend.key=element_blank(),
legend.position = "top",
legend.spacing.x = unit(0.25, 'cm'),
plot.margin=unit(c(1,1,0,0),"cm"))
gg
N <- 10
pc2_loading <- tibble(token = rownames(pc_loadings), loading = as.vector(pc_loadings[,2])) %>% arrange(-loading)
pc2_loading$loading <- scale(pc2_loading$loading, center = TRUE)
pc2_loading <- rbind(top_n(pc2_loading, N, loading),top_n(pc2_loading, -N, loading))
pc2_loading <- transform(pc2_loading, token = factor(token, levels = unique(token)))
# plot top tokens according to absolute loading values
gg <- ggplot(pc2_loading, aes(token, loading)) +
geom_bar(stat = "identity", fill = ifelse(pc2_loading$loading <= 0, "grey20", "grey70")) +
coord_flip() +
xlab("Tokens") + ylab("Tokens with Top Loadings on PC2") +
scale_colour_grey(start = .3, end = .7) +
theme(panel.background = element_blank(),
axis.text.x = element_text(size=16),
axis.text.y = element_text(size=16),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 15, b = 0, l = 15)),
axis.title.x = element_text(size=18, margin = margin(t = 15, r = 0, b = 15, l = 0)),
legend.text=element_text(size=16),
legend.title=element_blank(),
legend.key=element_blank(),
legend.position = "top",
legend.spacing.x = unit(0.25, 'cm'),
plot.margin=unit(c(1,1,0,0),"cm"))
gg
N <- 3
pc2_loading <- tibble(token = rownames(pc_loadings), loading = as.vector(pc_loadings[,2])) %>% arrange(-loading)
pc2_loading$loading <- scale(pc2_loading$loading, center = TRUE)
pc2_loading <- rbind(top_n(pc2_loading, N, loading),top_n(pc2_loading, -N, loading))
pc2_loading <- transform(pc2_loading, token = factor(token, levels = unique(token)))
# plot top tokens according to absolute loading values
gg <- ggplot(pc2_loading, aes(token, loading)) +
geom_bar(stat = "identity", fill = ifelse(pc2_loading$loading <= 0, "grey20", "grey70")) +
coord_flip() +
xlab("Tokens") + ylab("Tokens with Top Loadings on PC2") +
scale_colour_grey(start = .3, end = .7) +
theme(panel.background = element_blank(),
axis.text.x = element_text(size=16),
axis.text.y = element_text(size=16),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 15, b = 0, l = 15)),
axis.title.x = element_text(size=18, margin = margin(t = 15, r = 0, b = 15, l = 0)),
legend.text=element_text(size=16),
legend.title=element_blank(),
legend.key=element_blank(),
legend.position = "top",
legend.spacing.x = unit(0.25, 'cm'),
plot.margin=unit(c(1,1,0,0),"cm"))
gg
# Question 2: Who are the 5 people Obama's inaugural address is most
#close to in 2013? What about Trump in 2017?
nearest_neighbors(query = "2013-Obama", low_dim_space = inaugural_pca$x, N = 5, norm = "l2")
N <- 10
pc2_loading <- tibble(token = rownames(pc_loadings), loading = as.vector(pc_loadings[,2])) %>% arrange(-loading)
pc2_loading$loading <- scale(pc2_loading$loading, center = TRUE)
pc2_loading <- rbind(top_n(pc2_loading, N, loading),top_n(pc2_loading, -N, loading))
pc2_loading <- transform(pc2_loading, token = factor(token, levels = unique(token)))
pc2_loading <- dplyr::filter(pc2_loading, loading >3.2 | loading < -1)
# plot top tokens according to absolute loading values
gg <- ggplot(pc2_loading, aes(token, loading)) +
geom_bar(stat = "identity", fill = ifelse(pc2_loading$loading <= 0, "grey20", "grey70")) +
coord_flip() +
xlab("Tokens") + ylab("Tokens with Top Loadings on PC2") +
scale_colour_grey(start = .3, end = .7) +
theme(panel.background = element_blank(),
axis.text.x = element_text(size=16),
axis.text.y = element_text(size=16),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 15, b = 0, l = 15)),
axis.title.x = element_text(size=18, margin = margin(t = 15, r = 0, b = 15, l = 0)),
legend.text=element_text(size=16),
legend.title=element_blank(),
legend.key=element_blank(),
legend.position = "top",
legend.spacing.x = unit(0.25, 'cm'),
plot.margin=unit(c(1,1,0,0),"cm"))
gg
install.packages("rtweet")
get_token()
library(rtweet)
get_token()
#Search for up to 18,000 (non-retweeted) tweets containing Penn State
## search for 500 tweets
rt <- search_tweets(
"Penn State", n = 500, include_rts = FALSE
)
## preview tweets data
rt
View(rt)
### Create a DFM from the text of these tweets
?dfm
library(quanteda)
### Create a DFM from the text of these tweets
?dfm
library(quanteda)
library(rtweet)
get_token()
## find the most recent tweet the celebrited liked
musk <- get_favorites("elonmusk", n = 1)
musk
##Download their 500 most recent tweets.
musktm<- get_timelines(c("elonmusk"), n = 500)
View(musktm)
dfm <- dfm(musktm)
### Create a DFM from the text of these tweets
corpus <- courpus(musktm)
### Create a DFM from the text of these tweets
corpus <- corpus(musktm)
?dfm
dfm <- dfm(corpus)
dfm
dfm <- dfm(musktm, select = stopwords("english"))
View(dfm)
?topfeatures
topfeatures(dfm)
?dfm
dfm <- dfm(musktm, remove = stopwords("english"), tolower=FALSE, remove_punct = TRUE)
View(dfm)
?topfeatures
topfeatures(dfm)
dfm <- dfm(musktm, remove = stopwords("english"), tolower=FALSE, remove_punct = TRUE)
dfm <- dfm(corpus, remove = stopwords("english"), tolower=FALSE, remove_punct = TRUE)
dfm
?topfeatures
topfeatures(dfm)
#Search for up to 18,000 (non-retweeted) tweets containing Penn State
## search for 500 tweets
rt <- search_tweets(
"Penn State", n = 500, include_rts = FALSE
)
## preview tweets data
rt
View(rt)
## preview users data
users_data(rt)
## plot time series of tweets
dev.new()
ts_plot(rt, "3 hours") +
ggplot2::theme_minimal() +
ggplot2::theme(plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x = NULL, y = NULL,
title = "Frequency of Penn State Twitter statuses",
subtitle = "Twitter status (tweet) counts aggregated using three-hour intervals",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
)
## search for 500 tweets (in English) sent from the US
rt <- search_tweets(
"lang:en", geocode = lookup_coords("usa"), n = 500
)
## create lat/lng variables using all available tweet and profile geo-location data
rt <- lat_lng(rt)
## plot state boundaries
#install.packages("maps")
library(maps)
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("state", lwd = .25) # U.S. satates
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("world", lwd = .25) #map of the world
## plot lat and lng points onto state map
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("state", lwd = .25)
with(rt, points(lng, lat, pch = 20, cex = 1.5, col = rgb(0, .3, .7, .75)))
## plot lat and lng points onto state map
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("state", lwd = .25)
with(rt, points(lng, lat, pch = 20, cex = 1.5, col = rgb(0, .3, .7, .75)))
## plot state boundaries
#install.packages("maps")
library(maps)
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("state", lwd = .25) # U.S. satates
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("world", lwd = .25) #map of the world
maps::map("world", lwd = .25) #map of the world
maps::map("world", lwd = .25) #map of the world
## plot lat and lng points onto state map
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("state", lwd = .25)
with(rt, points(lng, lat, pch = 20, cex = 1.5, col = rgb(0, .3, .7, .75)))
stream_tweets(
"realdonaldtrump,trump",
timeout = 10 , #60 seconds
file_name = "tweetsabouttrump.json",
parse = FALSE
)
## read in the data as a tidy tbl data frame
djt <- parse_stream("tweetsabouttrump.json")
## read in the data as a tidy tbl data frame
djt <- parse_stream("tweetsabouttrump.json")
djt
maps::map("state", lwd = .25)
with(rt, points(lng, lat, pch = 20, cex = 1.5, col = rgb(0, .3, .7, .75)))
## create lat/lng variables using all available tweet and profile geo-location data
rt <- lat_lng(rt)
## plot state boundaries
#install.packages("maps")
library(maps)
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("state", lwd = .25) # U.S. satates
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("world", lwd = .25) #map of the world
## plot lat and lng points onto state map
dev.new()
par(mar = c(0, 0, 0, 0))
## search for 500 tweets (in English) sent from the US
rt <- search_tweets(
"lang:en", geocode = lookup_coords("usa"), n = 500
)
## create lat/lng variables using all available tweet and profile geo-location data
rt <- lat_lng(rt)
## plot state boundaries
#install.packages("maps")
library(maps)
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("state", lwd = .25) # U.S. satates
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("world", lwd = .25) #map of the world
## plot lat and lng points onto state map
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("state", lwd = .25)
with(rt, points(lng, lat, pch = 20, cex = 1.5, col = rgb(0, .3, .7, .75)))
stream_tweets(
"realdonaldtrump,trump",
timeout = 10 , #60 seconds
file_name = "tweetsabouttrump.json",
parse = FALSE
)
tmls <- get_timelines(c("cnn", "BBCWorld", "foxnews"), n = 3200)
## plot the frequency of tweets for each user over time
dev.new()
tmls %>%
#  dplyr::filter(created_at > "2017-10-29") %>%
dplyr::group_by(screen_name) %>%
ts_plot("days", trim = 1L) +
ggplot2::geom_point() +
ggplot2::theme_minimal() +
ggplot2::theme(
legend.title = ggplot2::element_blank(),
legend.position = "bottom",
plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x = NULL, y = NULL,
title = "Frequency of Twitter statuses posted by news organization",
subtitle = "Twitter status (tweet) counts aggregated by day",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
)
tmls <- get_timelines(c("cnn", "BBCWorld", "foxnews"), n = 3200)
## plot the frequency of tweets for each user over time
dev.new()
## plot the frequency of tweets for each user over time
dev.new()
tmls %>%
#  dplyr::filter(created_at > "2017-10-29") %>%
dplyr::group_by(screen_name) %>%
ts_plot("days", trim = 1L) +
ggplot2::geom_point() +
ggplot2::theme_minimal() +
ggplot2::theme(
legend.title = ggplot2::element_blank(),
legend.position = "bottom",
plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x = NULL, y = NULL,
title = "Frequency of Twitter statuses posted by news organization",
subtitle = "Twitter status (tweet) counts aggregated by day",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
)
legend.title = ggplot2::element_blank(),
legend.position = "bottom",
plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
tmls %>%
#  dplyr::filter(created_at > "2017-10-29") %>%
dplyr::group_by(screen_name) %>%
ts_plot("days", trim = 1L) +
ggplot2::geom_point() +
ggplot2::theme_minimal() +
ggplot2::theme(
legend.title = ggplot2::element_blank(),
legend.position = "bottom",
plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x = NULL, y = NULL,
title = "Frequency of Twitter statuses posted by news organization",
subtitle = "Twitter status (tweet) counts aggregated by day",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
)
## plot the frequency of tweets for each user over time
dev.new()
tmls %>%
#  dplyr::filter(created_at > "2017-10-29") %>%
dplyr::group_by(screen_name) %>%
ts_plot("days", trim = 1L) +
ggplot2::geom_point() +
ggplot2::theme_minimal() +
ggplot2::theme(
legend.title = ggplot2::element_blank(),
legend.position = "bottom",
plot.title = ggplot2::element_text(face = "bold")) +
ggplot2::labs(
x = NULL, y = NULL,
title = "Frequency of Twitter statuses posted by news organization",
subtitle = "Twitter status (tweet) counts aggregated by day",
caption = "\nSource: Data collected from Twitter's REST API via rtweet"
)
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("state", lwd = .25) # U.S. satates
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("world", lwd = .25) #map of the world
## plot lat and lng points onto state map
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("state", lwd = .25)
with(rt, points(lng, lat, pch = 20, cex = 1.5, col = rgb(0, .3, .7, .75)))
topfeatures(dfm)
dfm
dfm <- dfm(corpus, remove = stopwords("english"), tolower=TRUE, remove_punct = TRUE)
dfm
?topfeatures
topfeatures(dfm)
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("world", lwd = .25) #map of the world
## plot state boundaries
#install.packages("maps")
library(maps)
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("state", lwd = .25) # U.S. satates
## create lat/lng variables using all available tweet and profile geo-location data
rt <- lat_lng(rt)
## plot state boundaries
#install.packages("maps")
library(maps)
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("state", lwd = .25) # U.S. satates
## search for 500 tweets (in English) sent from the US
rt <- search_tweets(
"lang:en", geocode = lookup_coords("usa"), n = 500
)
## create lat/lng variables using all available tweet and profile geo-location data
rt <- lat_lng(rt)
## plot state boundaries
#install.packages("maps")
library(maps)
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("state", lwd = .25) # U.S. satates
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("world", lwd = .25) #map of the world
## plot lat and lng points onto state map
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("state", lwd = .25)
with(rt, points(lng, lat, pch = 20, cex = 1.5, col = rgb(0, .3, .7, .75)))
stream_tweets(
"realdonaldtrump,trump",
timeout = 10 , #60 seconds
file_name = "tweetsabouttrump.json",
parse = FALSE
)
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("world", lwd = .25) #map of the world
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("state", lwd = .25) # U.S. satates
## plot lat and lng points onto state map
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("state", lwd = .25)
with(rt, points(lng, lat, pch = 20, cex = 1.5, col = rgb(0, .3, .7, .75)))
## search for 500 tweets (in English) sent from the US
rt <- search_tweets(
"lang:en", geocode = lookup_coords("usa"), n = 500
)
## create lat/lng variables using all available tweet and profile geo-location data
rt <- lat_lng(rt)
## plot state boundaries
#install.packages("maps")
library(maps)
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("state", lwd = .25) # U.S. satates
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("world", lwd = .25) #map of the world
## plot lat and lng points onto state map
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("state", lwd = .25)
with(rt, points(lng, lat, pch = 20, cex = 1.5, col = rgb(0, .3, .7, .75)))
## plot lat and lng points onto state map
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("state", lwd = .25)
with(rt, points(lng, lat, pch = 20, cex = 1.5, col = rgb(0, .3, .7, .75)))
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("state", lwd = .25) # U.S. satates
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("world", lwd = .25) #map of the world
## plot lat and lng points onto state map
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("state", lwd = .25)
with(rt, points(lng, lat, pch = 20, cex = 1.5, col = rgb(0, .3, .7, .75)))
## search for 500 tweets (in English) sent from the US
rt <- search_tweets(
"lang:en", geocode = lookup_coords("usa"), n = 500
)
## create lat/lng variables using all available tweet and profile geo-location data
rt <- lat_lng(rt)
## plot state boundaries
#install.packages("maps")
library(maps)
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("state", lwd = .25) # U.S. satates
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("world", lwd = .25) #map of the world
## plot lat and lng points onto state map
dev.new()
par(mar = c(0, 0, 0, 0))
maps::map("state", lwd = .25)
with(rt, points(lng, lat, pch = 20, cex = 1.5, col = rgb(0, .3, .7, .75)))
