legend.key=element_blank(),
legend.position = "top",
legend.spacing.x = unit(0.25, 'cm'),
plot.margin=unit(c(1,1,0,0),"cm"))
View(gg)
gg
N <- 10
pc2_loading <- tibble(token = rownames(pc_loadings), loading = as.vector(pc_loadings[,2])) %>% arrange(-loading)
pc2_loading$loading <- scale(pc2_loading$loading, center = TRUE)
pc2_loading <- rbind(top_n(pc2_loading, N, loading),top_n(pc2_loading, -N, loading))
pc2_loading <- transform(pc2_loading, token = factor(token, levels = unique(token)))
# plot top tokens according to absolute loading values
gg <- ggplot(pc2_loading, aes(token, loading)) +
geom_bar(stat = "identity", fill = ifelse(pc2_loading$loading <= 0, "grey20", "grey70")) +
coord_flip() +
xlab("Tokens") + ylab("Tokens with Top Loadings on PC2") +
scale_colour_grey(start = .3, end = .7) +
theme(panel.background = element_blank(),
axis.text.x = element_text(size=16),
axis.text.y = element_text(size=16),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 15, b = 0, l = 15)),
axis.title.x = element_text(size=18, margin = margin(t = 15, r = 0, b = 15, l = 0)),
legend.text=element_text(size=16),
legend.title=element_blank(),
legend.key=element_blank(),
legend.position = "top",
legend.spacing.x = unit(0.25, 'cm'),
plot.margin=unit(c(1,1,0,0),"cm"))
gg
# Value of the rotated data: your "new", dimensionality reduced data
View(inaugural_pca$x)  # each observation
# what do we expect this correlation to be?
cor(pc_loadings[,1], pc_loadings[,2])  # these should be orthogonal
# token loadings
N <- 10
pc1_loading <- tibble(token = rownames(pc_loadings), loading = as.vector(pc_loadings[,1])) %>% arrange(-loading)
pc1_loading$loading <- scale(pc1_loading$loading, center = TRUE)
pc1_loading <- rbind(top_n(pc1_loading, N, loading),top_n(pc1_loading, -N, loading))
pc1_loading <- transform(pc1_loading, token = factor(token, levels = unique(token)))
# plot top tokens according to absolute loading values
ggplot(pc1_loading, aes(token, loading)) +
geom_bar(stat = "identity", fill = ifelse(pc1_loading$loading <= 0, "grey20", "grey70")) +
coord_flip() +
xlab("Tokens") + ylab("Tokens with Top Loadings on PC1") +
scale_colour_grey(start = .3, end = .7) +
theme(panel.background = element_blank(),
axis.text.x = element_text(size=16),
axis.text.y = element_text(size=16),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 15, b = 0, l = 15)),
axis.title.x = element_text(size=18, margin = margin(t = 15, r = 0, b = 15, l = 0)),
legend.text=element_text(size=16),
legend.title=element_blank(),
legend.key=element_blank(),
legend.position = "top",
legend.spacing.x = unit(0.25, 'cm'),
plot.margin=unit(c(1,1,0,0),"cm"))
N <- 10
pc2_loading <- tibble(token = rownames(pc_loadings), loading = as.vector(pc_loadings[,2])) %>% arrange(-loading)
pc2_loading$loading <- scale(pc2_loading$loading, center = TRUE)
pc2_loading <- rbind(top_n(pc2_loading, N, loading),top_n(pc2_loading, -N, loading))
pc2_loading <- transform(pc2_loading, token = factor(token, levels = unique(token)))
# plot top tokens according to absolute loading values
gg <- ggplot(pc2_loading, aes(token, loading)) +
geom_bar(stat = "identity", fill = ifelse(pc2_loading$loading <= 0, "grey20", "grey70")) +
coord_flip() +
xlab("Tokens") + ylab("Tokens with Top Loadings on PC2") +
scale_colour_grey(start = .3, end = .7) +
theme(panel.background = element_blank(),
axis.text.x = element_text(size=16),
axis.text.y = element_text(size=16),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 15, b = 0, l = 15)),
axis.title.x = element_text(size=18, margin = margin(t = 15, r = 0, b = 15, l = 0)),
legend.text=element_text(size=16),
legend.title=element_blank(),
legend.key=element_blank(),
legend.position = "top",
legend.spacing.x = unit(0.25, 'cm'),
plot.margin=unit(c(1,1,0,0),"cm"))
gg
N <- 10
pc1_loading <- tibble(token = rownames(pc_loadings), loading = as.vector(pc_loadings[,2])) %>% arrange(-loading)
pc1_loading$loading <- scale(pc1_loading$loading, center = TRUE)
pc1_loading <- rbind(top_n(pc1_loading, N, loading),top_n(pc1_loading, -N, loading))
pc1_loading <- transform(pc1_loading, token = factor(token, levels = unique(token)))
# plot top tokens according to absolute loading values
ggplot(pc1_loading, aes(token, loading)) +
geom_bar(stat = "identity", fill = ifelse(pc1_loading$loading <= 0, "grey20", "grey70")) +
coord_flip() +
xlab("Tokens") + ylab("Tokens with Top Loadings on PC1") +
scale_colour_grey(start = .3, end = .7) +
theme(panel.background = element_blank(),
axis.text.x = element_text(size=16),
axis.text.y = element_text(size=16),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 15, b = 0, l = 15)),
axis.title.x = element_text(size=18, margin = margin(t = 15, r = 0, b = 15, l = 0)),
legend.text=element_text(size=16),
legend.title=element_blank(),
legend.key=element_blank(),
legend.position = "top",
legend.spacing.x = unit(0.25, 'cm'),
plot.margin=unit(c(1,1,0,0),"cm"))
# token loadings
N <- 10
pc1_loading <- tibble(token = rownames(pc_loadings), loading = as.vector(pc_loadings[,1])) %>% arrange(-loading)
pc1_loading$loading <- scale(pc1_loading$loading, center = TRUE)
pc1_loading <- rbind(top_n(pc1_loading, N, loading),top_n(pc1_loading, -N, loading))
pc1_loading <- transform(pc1_loading, token = factor(token, levels = unique(token)))
# plot top tokens according to absolute loading values
ggplot(pc1_loading, aes(token, loading)) +
geom_bar(stat = "identity", fill = ifelse(pc1_loading$loading <= 0, "grey20", "grey70")) +
coord_flip() +
xlab("Tokens") + ylab("Tokens with Top Loadings on PC1") +
scale_colour_grey(start = .3, end = .7) +
theme(panel.background = element_blank(),
axis.text.x = element_text(size=16),
axis.text.y = element_text(size=16),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 15, b = 0, l = 15)),
axis.title.x = element_text(size=18, margin = margin(t = 15, r = 0, b = 15, l = 0)),
legend.text=element_text(size=16),
legend.title=element_blank(),
legend.key=element_blank(),
legend.position = "top",
legend.spacing.x = unit(0.25, 'cm'),
plot.margin=unit(c(1,1,0,0),"cm"))
# Value of the rotated data: your "new", dimensionality reduced data
View(inaugural_pca$x)  # each observation
pc_loadings <- inaugural_pca$rotation
pc_loadings
pc_loadings[,2]
pc_loadings[,1]
########## Loadings for each variable: columns contain the eigenvectors
inaugural_pca$rotation[1:10, 1:5]
dim(inaugural_pca$rotation)
# Question 2: Who are the 5 people Obama's inaugural address is most
#close to in 2013? What about Trump in 2017?
nearest_neighbors(query = "2013-Obama", low_dim_space = inaugural_pca$x, N = 5, norm = "l2")
pc2_loading <- tibble(token = rownames(pc_loadings), loading = as.vector(pc_loadings[,2])) %>% arrange(-loading)
pc2_loading$loading <- scale(pc2_loading$loading, center = TRUE)
pc2_loading <- rbind(top_n(pc2_loading, N, loading),top_n(pc2_loading, -N, loading))
pc2_loading <- transform(pc2_loading, token = factor(token, levels = unique(token)))
# plot top tokens according to absolute loading values
gg <- ggplot(pc2_loading, aes(token, loading)) +
geom_bar(stat = "identity", fill = ifelse(pc2_loading$loading <= 0, "grey20", "grey70")) +
coord_flip() +
xlab("Tokens") + ylab("Tokens with Top Loadings on PC2") +
scale_colour_grey(start = .3, end = .7) +
theme(panel.background = element_blank(),
axis.text.x = element_text(size=16),
axis.text.y = element_text(size=16),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 15, b = 0, l = 15)),
axis.title.x = element_text(size=18, margin = margin(t = 15, r = 0, b = 15, l = 0)),
legend.text=element_text(size=16),
legend.title=element_blank(),
legend.key=element_blank(),
legend.position = "top",
legend.spacing.x = unit(0.25, 'cm'),
plot.margin=unit(c(1,1,0,0),"cm"))
gg
N <- 20
pc2_loading <- tibble(token = rownames(pc_loadings), loading = as.vector(pc_loadings[,2])) %>% arrange(-loading)
pc2_loading$loading <- scale(pc2_loading$loading, center = TRUE)
pc2_loading <- rbind(top_n(pc2_loading, N, loading),top_n(pc2_loading, -N, loading))
pc2_loading <- transform(pc2_loading, token = factor(token, levels = unique(token)))
# plot top tokens according to absolute loading values
gg <- ggplot(pc2_loading, aes(token, loading)) +
geom_bar(stat = "identity", fill = ifelse(pc2_loading$loading <= 0, "grey20", "grey70")) +
coord_flip() +
xlab("Tokens") + ylab("Tokens with Top Loadings on PC2") +
scale_colour_grey(start = .3, end = .7) +
theme(panel.background = element_blank(),
axis.text.x = element_text(size=16),
axis.text.y = element_text(size=16),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 15, b = 0, l = 15)),
axis.title.x = element_text(size=18, margin = margin(t = 15, r = 0, b = 15, l = 0)),
legend.text=element_text(size=16),
legend.title=element_blank(),
legend.key=element_blank(),
legend.position = "top",
legend.spacing.x = unit(0.25, 'cm'),
plot.margin=unit(c(1,1,0,0),"cm"))
gg
# Question 2: Who are the 5 people Obama's inaugural address is most
#close to in 2013? What about Trump in 2017?
nearest_neighbors(query = "2013-Obama", low_dim_space = inaugural_pca$x, N = 5, norm = "l2")
N <- 5
pc2_loading <- tibble(token = rownames(pc_loadings), loading = as.vector(pc_loadings[,2])) %>% arrange(-loading)
pc2_loading$loading <- scale(pc2_loading$loading, center = TRUE)
pc2_loading <- rbind(top_n(pc2_loading, N, loading),top_n(pc2_loading, -N, loading))
pc2_loading <- transform(pc2_loading, token = factor(token, levels = unique(token)))
# plot top tokens according to absolute loading values
gg <- ggplot(pc2_loading, aes(token, loading)) +
geom_bar(stat = "identity", fill = ifelse(pc2_loading$loading <= 0, "grey20", "grey70")) +
coord_flip() +
xlab("Tokens") + ylab("Tokens with Top Loadings on PC2") +
scale_colour_grey(start = .3, end = .7) +
theme(panel.background = element_blank(),
axis.text.x = element_text(size=16),
axis.text.y = element_text(size=16),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 15, b = 0, l = 15)),
axis.title.x = element_text(size=18, margin = margin(t = 15, r = 0, b = 15, l = 0)),
legend.text=element_text(size=16),
legend.title=element_blank(),
legend.key=element_blank(),
legend.position = "top",
legend.spacing.x = unit(0.25, 'cm'),
plot.margin=unit(c(1,1,0,0),"cm"))
gg
N <- 1
pc2_loading <- tibble(token = rownames(pc_loadings), loading = as.vector(pc_loadings[,2])) %>% arrange(-loading)
pc2_loading$loading <- scale(pc2_loading$loading, center = TRUE)
pc2_loading <- rbind(top_n(pc2_loading, N, loading),top_n(pc2_loading, -N, loading))
pc2_loading <- transform(pc2_loading, token = factor(token, levels = unique(token)))
# plot top tokens according to absolute loading values
gg <- ggplot(pc2_loading, aes(token, loading)) +
geom_bar(stat = "identity", fill = ifelse(pc2_loading$loading <= 0, "grey20", "grey70")) +
coord_flip() +
xlab("Tokens") + ylab("Tokens with Top Loadings on PC2") +
scale_colour_grey(start = .3, end = .7) +
theme(panel.background = element_blank(),
axis.text.x = element_text(size=16),
axis.text.y = element_text(size=16),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 15, b = 0, l = 15)),
axis.title.x = element_text(size=18, margin = margin(t = 15, r = 0, b = 15, l = 0)),
legend.text=element_text(size=16),
legend.title=element_blank(),
legend.key=element_blank(),
legend.position = "top",
legend.spacing.x = unit(0.25, 'cm'),
plot.margin=unit(c(1,1,0,0),"cm"))
gg
N <- 4
pc2_loading <- tibble(token = rownames(pc_loadings), loading = as.vector(pc_loadings[,2])) %>% arrange(-loading)
pc2_loading$loading <- scale(pc2_loading$loading, center = TRUE)
pc2_loading <- rbind(top_n(pc2_loading, N, loading),top_n(pc2_loading, -N, loading))
pc2_loading <- transform(pc2_loading, token = factor(token, levels = unique(token)))
# plot top tokens according to absolute loading values
gg <- ggplot(pc2_loading, aes(token, loading)) +
geom_bar(stat = "identity", fill = ifelse(pc2_loading$loading <= 0, "grey20", "grey70")) +
coord_flip() +
xlab("Tokens") + ylab("Tokens with Top Loadings on PC2") +
scale_colour_grey(start = .3, end = .7) +
theme(panel.background = element_blank(),
axis.text.x = element_text(size=16),
axis.text.y = element_text(size=16),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 15, b = 0, l = 15)),
axis.title.x = element_text(size=18, margin = margin(t = 15, r = 0, b = 15, l = 0)),
legend.text=element_text(size=16),
legend.title=element_blank(),
legend.key=element_blank(),
legend.position = "top",
legend.spacing.x = unit(0.25, 'cm'),
plot.margin=unit(c(1,1,0,0),"cm"))
gg
N <- 3
pc2_loading <- tibble(token = rownames(pc_loadings), loading = as.vector(pc_loadings[,2])) %>% arrange(-loading)
pc2_loading$loading <- scale(pc2_loading$loading, center = TRUE)
pc2_loading <- rbind(top_n(pc2_loading, N, loading),top_n(pc2_loading, -N, loading))
pc2_loading <- transform(pc2_loading, token = factor(token, levels = unique(token)))
# plot top tokens according to absolute loading values
gg <- ggplot(pc2_loading, aes(token, loading)) +
geom_bar(stat = "identity", fill = ifelse(pc2_loading$loading <= 0, "grey20", "grey70")) +
coord_flip() +
xlab("Tokens") + ylab("Tokens with Top Loadings on PC2") +
scale_colour_grey(start = .3, end = .7) +
theme(panel.background = element_blank(),
axis.text.x = element_text(size=16),
axis.text.y = element_text(size=16),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 15, b = 0, l = 15)),
axis.title.x = element_text(size=18, margin = margin(t = 15, r = 0, b = 15, l = 0)),
legend.text=element_text(size=16),
legend.title=element_blank(),
legend.key=element_blank(),
legend.position = "top",
legend.spacing.x = unit(0.25, 'cm'),
plot.margin=unit(c(1,1,0,0),"cm"))
gg
N <- 4
pc2_loading <- tibble(token = rownames(pc_loadings), loading = as.vector(pc_loadings[,2])) %>% arrange(-loading)
pc2_loading$loading <- scale(pc2_loading$loading, center = TRUE)
pc2_loading <- rbind(top_n(pc2_loading, N, loading),top_n(pc2_loading, -N, loading))
pc2_loading <- transform(pc2_loading, token = factor(token, levels = unique(token)))
# plot top tokens according to absolute loading values
gg <- ggplot(pc2_loading, aes(token, loading)) +
geom_bar(stat = "identity", fill = ifelse(pc2_loading$loading <= 0, "grey20", "grey70")) +
coord_flip() +
xlab("Tokens") + ylab("Tokens with Top Loadings on PC2") +
scale_colour_grey(start = .3, end = .7) +
theme(panel.background = element_blank(),
axis.text.x = element_text(size=16),
axis.text.y = element_text(size=16),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 15, b = 0, l = 15)),
axis.title.x = element_text(size=18, margin = margin(t = 15, r = 0, b = 15, l = 0)),
legend.text=element_text(size=16),
legend.title=element_blank(),
legend.key=element_blank(),
legend.position = "top",
legend.spacing.x = unit(0.25, 'cm'),
plot.margin=unit(c(1,1,0,0),"cm"))
gg
N <- 5
pc2_loading <- tibble(token = rownames(pc_loadings), loading = as.vector(pc_loadings[,2])) %>% arrange(-loading)
pc2_loading$loading <- scale(pc2_loading$loading, center = TRUE)
pc2_loading <- rbind(top_n(pc2_loading, N, loading),top_n(pc2_loading, -N, loading))
pc2_loading <- transform(pc2_loading, token = factor(token, levels = unique(token)))
# plot top tokens according to absolute loading values
gg <- ggplot(pc2_loading, aes(token, loading)) +
geom_bar(stat = "identity", fill = ifelse(pc2_loading$loading <= 0, "grey20", "grey70")) +
coord_flip() +
xlab("Tokens") + ylab("Tokens with Top Loadings on PC2") +
scale_colour_grey(start = .3, end = .7) +
theme(panel.background = element_blank(),
axis.text.x = element_text(size=16),
axis.text.y = element_text(size=16),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 15, b = 0, l = 15)),
axis.title.x = element_text(size=18, margin = margin(t = 15, r = 0, b = 15, l = 0)),
legend.text=element_text(size=16),
legend.title=element_blank(),
legend.key=element_blank(),
legend.position = "top",
legend.spacing.x = unit(0.25, 'cm'),
plot.margin=unit(c(1,1,0,0),"cm"))
gg
N <- 3
pc2_loading <- tibble(token = rownames(pc_loadings), loading = as.vector(pc_loadings[,2])) %>% arrange(-loading)
pc2_loading$loading <- scale(pc2_loading$loading, center = TRUE)
pc2_loading <- rbind(top_n(pc2_loading, N, loading),top_n(pc2_loading, -N, loading))
pc2_loading <- transform(pc2_loading, token = factor(token, levels = unique(token)))
# plot top tokens according to absolute loading values
gg <- ggplot(pc2_loading, aes(token, loading)) +
geom_bar(stat = "identity", fill = ifelse(pc2_loading$loading <= 0, "grey20", "grey70")) +
coord_flip() +
xlab("Tokens") + ylab("Tokens with Top Loadings on PC2") +
scale_colour_grey(start = .3, end = .7) +
theme(panel.background = element_blank(),
axis.text.x = element_text(size=16),
axis.text.y = element_text(size=16),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 15, b = 0, l = 15)),
axis.title.x = element_text(size=18, margin = margin(t = 15, r = 0, b = 15, l = 0)),
legend.text=element_text(size=16),
legend.title=element_blank(),
legend.key=element_blank(),
legend.position = "top",
legend.spacing.x = unit(0.25, 'cm'),
plot.margin=unit(c(1,1,0,0),"cm"))
gg
N <- 11
pc2_loading <- tibble(token = rownames(pc_loadings), loading = as.vector(pc_loadings[,2])) %>% arrange(-loading)
pc2_loading$loading <- scale(pc2_loading$loading, center = TRUE)
pc2_loading <- rbind(top_n(pc2_loading, N, loading),top_n(pc2_loading, -N, loading))
pc2_loading <- transform(pc2_loading, token = factor(token, levels = unique(token)))
# plot top tokens according to absolute loading values
gg <- ggplot(pc2_loading, aes(token, loading)) +
geom_bar(stat = "identity", fill = ifelse(pc2_loading$loading <= 0, "grey20", "grey70")) +
coord_flip() +
xlab("Tokens") + ylab("Tokens with Top Loadings on PC2") +
scale_colour_grey(start = .3, end = .7) +
theme(panel.background = element_blank(),
axis.text.x = element_text(size=16),
axis.text.y = element_text(size=16),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 15, b = 0, l = 15)),
axis.title.x = element_text(size=18, margin = margin(t = 15, r = 0, b = 15, l = 0)),
legend.text=element_text(size=16),
legend.title=element_blank(),
legend.key=element_blank(),
legend.position = "top",
legend.spacing.x = unit(0.25, 'cm'),
plot.margin=unit(c(1,1,0,0),"cm"))
gg
pc2_loading <- tibble(token = rownames(pc_loadings), loading = as.vector(pc_loadings[,3])) %>% arrange(-loading)
pc2_loading$loading <- scale(pc2_loading$loading, center = TRUE)
pc2_loading <- rbind(top_n(pc2_loading, N, loading),top_n(pc2_loading, -N, loading))
pc2_loading <- transform(pc2_loading, token = factor(token, levels = unique(token)))
# plot top tokens according to absolute loading values
gg <- ggplot(pc2_loading, aes(token, loading)) +
geom_bar(stat = "identity", fill = ifelse(pc2_loading$loading <= 0, "grey20", "grey70")) +
coord_flip() +
xlab("Tokens") + ylab("Tokens with Top Loadings on PC2") +
scale_colour_grey(start = .3, end = .7) +
theme(panel.background = element_blank(),
axis.text.x = element_text(size=16),
axis.text.y = element_text(size=16),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 15, b = 0, l = 15)),
axis.title.x = element_text(size=18, margin = margin(t = 15, r = 0, b = 15, l = 0)),
legend.text=element_text(size=16),
legend.title=element_blank(),
legend.key=element_blank(),
legend.position = "top",
legend.spacing.x = unit(0.25, 'cm'),
plot.margin=unit(c(1,1,0,0),"cm"))
gg
N <- 10
pc2_loading <- tibble(token = rownames(pc_loadings), loading = as.vector(pc_loadings[,4])) %>% arrange(-loading)
pc2_loading$loading <- scale(pc2_loading$loading, center = TRUE)
pc2_loading <- rbind(top_n(pc2_loading, N, loading),top_n(pc2_loading, -N, loading))
pc2_loading <- transform(pc2_loading, token = factor(token, levels = unique(token)))
# plot top tokens according to absolute loading values
gg <- ggplot(pc2_loading, aes(token, loading)) +
geom_bar(stat = "identity", fill = ifelse(pc2_loading$loading <= 0, "grey20", "grey70")) +
coord_flip() +
xlab("Tokens") + ylab("Tokens with Top Loadings on PC2") +
scale_colour_grey(start = .3, end = .7) +
theme(panel.background = element_blank(),
axis.text.x = element_text(size=16),
axis.text.y = element_text(size=16),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 15, b = 0, l = 15)),
axis.title.x = element_text(size=18, margin = margin(t = 15, r = 0, b = 15, l = 0)),
legend.text=element_text(size=16),
legend.title=element_blank(),
legend.key=element_blank(),
legend.position = "top",
legend.spacing.x = unit(0.25, 'cm'),
plot.margin=unit(c(1,1,0,0),"cm"))
gg
# Question 2: Who are the 5 people Obama's inaugural address is most
#close to in 2013? What about Trump in 2017?
nearest_neighbors(query = "2013-Obama", low_dim_space = inaugural_pca$x, N = 5, norm = "l2")
N <- 10
pc2_loading <- tibble(token = rownames(pc_loadings), loading = as.vector(pc_loadings[,5])) %>% arrange(-loading)
pc2_loading$loading <- scale(pc2_loading$loading, center = TRUE)
pc2_loading <- rbind(top_n(pc2_loading, N, loading),top_n(pc2_loading, -N, loading))
pc2_loading <- transform(pc2_loading, token = factor(token, levels = unique(token)))
# plot top tokens according to absolute loading values
gg <- ggplot(pc2_loading, aes(token, loading)) +
geom_bar(stat = "identity", fill = ifelse(pc2_loading$loading <= 0, "grey20", "grey70")) +
coord_flip() +
xlab("Tokens") + ylab("Tokens with Top Loadings on PC2") +
scale_colour_grey(start = .3, end = .7) +
theme(panel.background = element_blank(),
axis.text.x = element_text(size=16),
axis.text.y = element_text(size=16),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 15, b = 0, l = 15)),
axis.title.x = element_text(size=18, margin = margin(t = 15, r = 0, b = 15, l = 0)),
legend.text=element_text(size=16),
legend.title=element_blank(),
legend.key=element_blank(),
legend.position = "top",
legend.spacing.x = unit(0.25, 'cm'),
plot.margin=unit(c(1,1,0,0),"cm"))
gg
N <- 10
pc2_loading <- tibble(token = rownames(pc_loadings), loading = as.vector(pc_loadings[,2])) %>% arrange(-loading)
pc2_loading$loading <- scale(pc2_loading$loading, center = TRUE)
pc2_loading <- rbind(top_n(pc2_loading, N, loading),top_n(pc2_loading, -N, loading))
pc2_loading <- transform(pc2_loading, token = factor(token, levels = unique(token)))
# plot top tokens according to absolute loading values
gg <- ggplot(pc2_loading, aes(token, loading)) +
geom_bar(stat = "identity", fill = ifelse(pc2_loading$loading <= 0, "grey20", "grey70")) +
coord_flip() +
xlab("Tokens") + ylab("Tokens with Top Loadings on PC2") +
scale_colour_grey(start = .3, end = .7) +
theme(panel.background = element_blank(),
axis.text.x = element_text(size=16),
axis.text.y = element_text(size=16),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 15, b = 0, l = 15)),
axis.title.x = element_text(size=18, margin = margin(t = 15, r = 0, b = 15, l = 0)),
legend.text=element_text(size=16),
legend.title=element_blank(),
legend.key=element_blank(),
legend.position = "top",
legend.spacing.x = unit(0.25, 'cm'),
plot.margin=unit(c(1,1,0,0),"cm"))
gg
N <- 3
pc2_loading <- tibble(token = rownames(pc_loadings), loading = as.vector(pc_loadings[,2])) %>% arrange(-loading)
pc2_loading$loading <- scale(pc2_loading$loading, center = TRUE)
pc2_loading <- rbind(top_n(pc2_loading, N, loading),top_n(pc2_loading, -N, loading))
pc2_loading <- transform(pc2_loading, token = factor(token, levels = unique(token)))
# plot top tokens according to absolute loading values
gg <- ggplot(pc2_loading, aes(token, loading)) +
geom_bar(stat = "identity", fill = ifelse(pc2_loading$loading <= 0, "grey20", "grey70")) +
coord_flip() +
xlab("Tokens") + ylab("Tokens with Top Loadings on PC2") +
scale_colour_grey(start = .3, end = .7) +
theme(panel.background = element_blank(),
axis.text.x = element_text(size=16),
axis.text.y = element_text(size=16),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 15, b = 0, l = 15)),
axis.title.x = element_text(size=18, margin = margin(t = 15, r = 0, b = 15, l = 0)),
legend.text=element_text(size=16),
legend.title=element_blank(),
legend.key=element_blank(),
legend.position = "top",
legend.spacing.x = unit(0.25, 'cm'),
plot.margin=unit(c(1,1,0,0),"cm"))
gg
# Question 2: Who are the 5 people Obama's inaugural address is most
#close to in 2013? What about Trump in 2017?
nearest_neighbors(query = "2013-Obama", low_dim_space = inaugural_pca$x, N = 5, norm = "l2")
N <- 10
pc2_loading <- tibble(token = rownames(pc_loadings), loading = as.vector(pc_loadings[,2])) %>% arrange(-loading)
pc2_loading$loading <- scale(pc2_loading$loading, center = TRUE)
pc2_loading <- rbind(top_n(pc2_loading, N, loading),top_n(pc2_loading, -N, loading))
pc2_loading <- transform(pc2_loading, token = factor(token, levels = unique(token)))
pc2_loading <- dplyr::filter(pc2_loading, loading >3.2 | loading < -1)
# plot top tokens according to absolute loading values
gg <- ggplot(pc2_loading, aes(token, loading)) +
geom_bar(stat = "identity", fill = ifelse(pc2_loading$loading <= 0, "grey20", "grey70")) +
coord_flip() +
xlab("Tokens") + ylab("Tokens with Top Loadings on PC2") +
scale_colour_grey(start = .3, end = .7) +
theme(panel.background = element_blank(),
axis.text.x = element_text(size=16),
axis.text.y = element_text(size=16),
axis.title.y = element_text(size=18, margin = margin(t = 0, r = 15, b = 0, l = 15)),
axis.title.x = element_text(size=18, margin = margin(t = 15, r = 0, b = 15, l = 0)),
legend.text=element_text(size=16),
legend.title=element_blank(),
legend.key=element_blank(),
legend.position = "top",
legend.spacing.x = unit(0.25, 'cm'),
plot.margin=unit(c(1,1,0,0),"cm"))
gg
